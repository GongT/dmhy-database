/**
 * This is the main configuration file for Rush.
 * For full documentation, please see https://rushjs.io
 */
{
	"$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",
	"rushVersion": "5.85.1",
	"pnpmVersion": "6.7.1",
	"hotfixChangeEnabled": true,
	"nodeSupportedVersionRange": ">=16",
	"suppressNodeLtsWarning": true,
	"ensureConsistentVersions": false,
	"projectFolderMinDepth": 2,
	"projectFolderMaxDepth": 2,
	"allowMostlyStandardPackageNames": false,

	/**
	 * This feature helps you to review and approve new packages before they are introduced
	 * to your monorepo.  For example, you may be concerned about licensing, code quality,
	 * performance, or simply accumulating too many libraries with overlapping functionality.
	 * The approvals are tracked in two config files "browser-approved-packages.json"
	 * and "nonbrowser-approved-packages.json".  See the Rush documentation for details.
	 */
	// "approvedPackagesPolicy": {
	//   /**
	//    * The review categories allow you to say for example "This library is approved for usage
	//    * in prototypes, but not in production code."
	//    *
	//    * Each project can be associated with one review category, by assigning the "reviewCategory" field
	//    * in the "projects" section of rush.json.  The approval is then recorded in the files
	//    * "common/config/rush/browser-approved-packages.json" and "nonbrowser-approved-packages.json"
	//    * which are automatically generated during "rush update".
	//    *
	//    * Designate categories with whatever granularity is appropriate for your review process,
	//    * or you could just have a single category called "default".
	//    */
	//   "reviewCategories": [
	//     // Some example categories:
	//     "production", // projects that ship to production
	//     "tools",      // non-shipping projects that are part of the developer toolchain
	//     "prototypes"  // experiments that should mostly be ignored by the review process
	//   ],
	//
	//   /**
	//    * A list of NPM package scopes that will be excluded from review.
	//    * We recommend to exclude TypeScript typings (the "@types" scope), because
	//    * if the underlying package was already approved, this would imply that the typings
	//    * are also approved.
	//    */
	//   // "ignoredNpmScopes": ["@types"]
	// },

	/**
	 * If you use Git as your version control system, this section has some additional
	 * optional features you can use.
	 */
	"gitPolicy": {
		/**
		 * Work at a big company?  Tired of finding Git commits at work with unprofessional Git
		 * emails such as "beer-lover@my-college.edu"?  Rush can validate people's Git email address
		 * before they get started.
		 *
		 * Define a list of regular expressions describing allowable e-mail patterns for Git commits.
		 * They are case-insensitive anchored JavaScript RegExps.  Example: ".*@example\.com"
		 *
		 * IMPORTANT: Because these are regular expressions encoded as JSON string literals,
		 * RegExp escapes need two backslashes, and ordinary periods should be "\\.".
		 */
		// "allowedEmailRegExps": [
		//   "[^@]+@users\\.noreply\\.github\\.com",
		//   "rush-bot@example\\.org"
		// ],
		/**
		 * When Rush reports that the address is malformed, the notice can include an example
		 * of a recommended email.  Make sure it conforms to one of the allowedEmailRegExps
		 * expressions.
		 */
		// "sampleEmail": "example@users.noreply.github.com",
		/**
		 * The commit message to use when committing changes during 'rush publish'.
		 *
		 * For example, if you want to prevent these commits from triggering a CI build,
		 * you might configure your system's trigger to look for a special string such as "[skip-ci]"
		 * in the commit message, and then customize Rush's message to contain that string.
		 */
		// "versionBumpCommitMessage": "Bump versions [skip ci]",
		/**
		 * The commit message to use when committing changes during 'rush version'.
		 *
		 * For example, if you want to prevent these commits from triggering a CI build,
		 * you might configure your system's trigger to look for a special string such as "[skip-ci]"
		 * in the commit message, and then customize Rush's message to contain that string.
		 */
		// "changeLogUpdateCommitMessage": "Update changelogs [skip ci]",
		/**
		 * The commit message to use when commiting changefiles during 'rush change --commit'
		 *
		 * If no commit message is set it will default to 'Rush change'
		 */
		// "changefilesCommitMessage": "Rush change"
	},

	"repository": {
		"url": "https://github.com/GongT/dmhy-database.git",
		"defaultBranch": "master"
	},

	/**
	 * Event hooks are customized script actions that Rush executes when specific events occur
	 */
	"eventHooks": {
		/**
		 * The list of shell commands to run before the Rush installation starts
		 */
		"preRushInstall": [
			// "common/scripts/pre-rush-install.js"
		],

		/**
		 * The list of shell commands to run after the Rush installation finishes
		 */
		"postRushInstall": [],

		/**
		 * The list of shell commands to run before the Rush build command starts
		 */
		"preRushBuild": [],

		/**
		 * The list of shell commands to run after the Rush build command finishes
		 */
		"postRushBuild": []
	},

	/**
	 * Installation variants allow you to maintain a parallel set of configuration files that can be
	 * used to build the entire monorepo with an alternate set of dependencies.  For example, suppose
	 * you upgrade all your projects to use a new release of an important framework, but during a transition period
	 * you intend to maintain compatibility with the old release.  In this situation, you probably want your
	 * CI validation to build the entire repo twice: once with the old release, and once with the new release.
	 *
	 * Rush "installation variants" correspond to sets of config files located under this folder:
	 *
	 *   common/config/rush/variants/<variant_name>
	 *
	 * The variant folder can contain an alternate common-versions.json file.  Its "preferredVersions" field can be used
	 * to select older versions of dependencies (within a loose SemVer range specified in your package.json files).
	 * To install a variant, run "rush install --variant <variant_name>".
	 *
	 * For more details and instructions, see this article:  https://rushjs.io/pages/advanced/installation_variants/
	 */
	"variants": [
		// {
		//   /**
		//    * The folder name for this variant.
		//    */
		//   "variantName": "old-sdk",
		//
		//   /**
		//    * An informative description
		//    */
		//   "description": "Build this repo using the previous release of the SDK"
		// }
	],
	"projects": [
		{
			"packageName": "local-rig",
			"projectFolder": "common/local-rig",
			"shouldPublish": false
		},
		{
			"packageName": "core.library",
			"projectFolder": "core/library",
			"shouldPublish": false
		},
		{
			"packageName": "core.watcher",
			"projectFolder": "core/watcher",
			"shouldPublish": false
		},
		{
			"packageName": "core.spider",
			"projectFolder": "core/spider",
			"shouldPublish": false
		},
		{
			"packageName": "core.bootloader",
			"projectFolder": "core/bootloader",
			"shouldPublish": false
		},
		{
			"packageName": "search-api.dandanplay",
			"projectFolder": "search-api/dandanplay",
			"shouldPublish": false
		}
	]
}
